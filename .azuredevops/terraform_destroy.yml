parameters:
  - name: "environment_tags"
    type: object

  - name: use_selfhosted
    type: boolean
    default: false

  - name: bcaPool
    type: string

  - name: hostedImage
    type: string

  - name: tf_loglevel
    type: string

  - name: run_tfapply
    displayName: Run Terraform apply to create/change/destroy infrastructure
    type: boolean
    default: true

  - name: run_tfdestroy
    displayName: Run Terraform destroy to destroy infrastructure
    type: boolean
    default: false

stages:
  - "${{ each environment_tag in parameters.environment_tags }}":
      - stage: ${{ environment_tag }}_destroy
        condition: |
          and(
          eq('${{ parameters.run_tfdestroy }}', 'true'),
          ne(variables['Build.Reason'], 'PullRequest'),
          ne(variables['Build.Reason'], 'Schedule'),
          or(
          eq('${{ parameters.run_tfapply }}', 'false'),
          and(
          eq('${{ parameters.run_tfapply }}', 'true'),
          succeededOrFailed('${{ environment_tag }}_apply')
          )
          )
          )
        # This condition checks if:
        # - run_tfdestroy is true
        # - The build is not triggered by a Pull Request or a scheduled run
        # - If run_tfapply is true, ${environment_tag}_apply must have succeeded or failed
        # - If run_tfapply is false, it doesn't matter if ${environment_tag}_apply succeeded or failed
        displayName: "${{ environment_tag }} TF Destroy"
        dependsOn:
        jobs:
          - deployment: ${{ environment_tag}}_destroy
            environment: ${{ environment_tag}}
            timeoutInMinutes: 0
            variables:
              - name: environment_tag
                value: ${{ environment_tag}}
              - name: use_selfhosted
                value: ${{ parameters.use_selfhosted }}
              - template: ../iac_templates/variables.yml
                parameters:
                  environment_tag: ${{ environment_tag}}
            displayName: "Build/modify ${{ environment_tag}} infrastructure"
            pool:
              ${{ if or( eq(parameters.use_selfhosted, true), eq(variables.use_selfhosted, 'true')  ) }}:
                name: "${{ parameters.bcaPool }}"
              ${{ if and( eq(parameters.use_selfhosted, false), eq(variables.use_selfhosted, 'false') ) }}:
                vmimage: "${{ parameters.hostedImage }}"
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                      condition: succeededOrFailed()
                      displayName: "Checkout main repo"
                      fetchDepth: 0
                      fetchTags: true
                      persistCredentials: true

                    #- task: PowerShell@2
                    #  condition: succeededOrFailed()
                    #  displayName: Set Terraform Environment Variables
                    #  inputs:
                    #    filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/set_tf_env_vars.ps1"

                    - task: PowerShell@2
                      displayName: "Inject GitHub PAT into module source URLs"
                      inputs:
                        filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/inject_github_pat.ps1"
                        arguments: "-githubpat $(github-pat)"
                        failOnStderr: true
                        showWarnings: true
                        pwsh: true
                        workingDirectory: "$(system.defaultworkingdirectory)"

                    - task: TerraformInstaller@1
                      condition: succeededOrFailed()
                      displayName: "Install terraform version $(terraform_installer_version)"
                      enabled: true
                      inputs:
                        terraformVersion: "$(terraform_installer_version)"

                    - task: TerraformTask@5
                      condition: succeeded()
                      displayName: "terraform init"
                      env:
                        TF_IN_AUTOMATION: true
                        TF_IGNORE: "trace"
                        TF_INPUT: 0
                        TF_LOG: ${{ parameters.tf_loglevel }}
                        TF_LOG_PATH: $(System.DefaultWorkingDirectory)/terraform_init.log
                        TF_VAR_AZDO_PERSONAL_ACCESS_TOKEN: $(azdo_pat)
                        TF_VAR_AZDO_ORG_SERVICE_URL: $(azdo_orgurl)
                        TF_WORKSPACE: "default"
                      inputs:
                        provider: "azurerm"
                        command: "init"
                        backendServiceArm: ${{ variables.subscription_connection}}
                        backendAzureRmResourceGroupName: "$(resource-group)"
                        backendAzureRmStorageAccountName: "$(storage-account)"
                        backendAzureRmContainerName: $(container-name)
                        backendAzureRmKey: "$(state-key)"
                        workingDirectory: $(system.DefaultWorkingDirectory)/$(tfdir)

                    - task: PowerShell@2
                      displayName: Check Terraform init log
                      condition: succeededOrFailed()
                      inputs:
                        filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/terraform_log_checker.ps1"
                        arguments: "-LogName $(System.DefaultWorkingDirectory)/terraform_init.log -variableName TfInitLogExists"

                    - task: PublishPipelineArtifact@1
                      condition: |
                        and(
                        succeededOrFailed(),
                        eq(variables['TfInitLogExists'], 'true')
                        )
                      continueOnError: true
                      displayName: "Publish terraform init log for $(environment_tag)"
                      enabled: true
                      inputs:
                        path: $(System.DefaultWorkingDirectory)/terraform_init.log
                        artifact: $(environment_tag)_Terraform_init_log

                    - task: TerraformTask@5
                      condition: succeeded()
                      displayName: "terraform validate"
                      env:
                        TF_IN_AUTOMATION: true
                        TF_IGNORE: "trace"
                        TF_INPUT: 0
                        TF_LOG: ${{ parameters.tf_loglevel }}
                        TF_LOG_PATH: $(System.DefaultWorkingDirectory)/terraform_validate.log
                        TF_VAR_AZDO_PERSONAL_ACCESS_TOKEN: $(azdo_pat)
                        TF_VAR_AZDO_ORG_SERVICE_URL: $(azdo_orgurl)
                        TF_WORKSPACE: "default"
                      inputs:
                        provider: "azurerm"
                        command: "validate"
                        workingDirectory: $(system.DefaultWorkingDirectory)/$(tfdir)
                        environmentServiceNameAzureRM: ${{ variables.subscription_connection}}

                    - task: PowerShell@2
                      displayName: Check Terraform Validate log
                      condition: succeededOrFailed()
                      inputs:
                        filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/terraform_log_checker.ps1"
                        arguments: "-LogName $(System.DefaultWorkingDirectory)/terraform_validate.log -variableName TfValidateLogExists"

                    - task: PublishPipelineArtifact@1
                      condition: |
                        and(
                        succeededOrFailed(),
                        eq(variables['TfValidateLogExists'], 'true')
                        )
                      continueOnError: true
                      displayName: "Publish terraform validate log for $(environment_tag)"
                      enabled: true
                      inputs:
                        path: $(System.DefaultWorkingDirectory)/terraform_validate.log
                        artifact: $(environment_tag)_Terraform_validate_log

                    - task: TerraformTask@5
                      condition: succeeded()
                      displayName: "terraform plan"
                      env:
                        TF_IN_AUTOMATION: true
                        TF_IGNORE: "trace"
                        TF_INPUT: 0
                        TF_LOG: ${{ parameters.tf_loglevel }}
                        TF_LOG_PATH: $(System.DefaultWorkingDirectory)/terraform_plan.log
                        TF_VAR_AZDO_PERSONAL_ACCESS_TOKEN: $(azdo_pat)
                        TF_VAR_AZDO_ORG_SERVICE_URL: $(azdo_orgurl)
                        TF_WORKSPACE: "default"
                      inputs:
                        provider: "azurerm"
                        command: "plan"
                        commandOptions: -destroy
                          -out=plan_destroy_$(environment_tag)
                          -var-file=environment/default.tfvars
                          -var-file=environment/$(environment_tag)/variables.tfvars
                        workingDirectory: $(system.DefaultWorkingDirectory)/$(tfdir)
                        environmentServiceNameAzureRM: ${{ variables.subscription_connection}}

                    - task: PowerShell@2
                      displayName: Check Terraform Plan log
                      condition: succeededOrFailed()
                      inputs:
                        filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/terraform_log_checker.ps1"
                        arguments: "-LogName $(System.DefaultWorkingDirectory)/terraform_plan.log -variableName TfPlanLogExists"

                    - task: PublishPipelineArtifact@1
                      condition: |
                        and(
                        succeededOrFailed(),
                        eq(variables['TfPlanLogExists'], 'true')
                        )
                      continueOnError: true
                      displayName: "Publish terraform plan for $(environment_tag)"
                      enabled: true
                      inputs:
                        path: $(System.DefaultWorkingDirectory)/$(tfdir)/plan_destroy_$(environment_tag)
                        artifact: plan_destroy_$(environment_tag)

                    - task: TerraformTask@5
                      condition: succeeded()
                      displayName: Terraform Destroy
                      env:
                        TF_IN_AUTOMATION: true
                        TF_IGNORE: "trace"
                        TF_INPUT: 0
                        TF_LOG: ${{ parameters.tf_loglevel }}
                        TF_LOG_PATH: $(System.DefaultWorkingDirectory)/terraform_destroy.log
                        TF_VAR_AZDO_PERSONAL_ACCESS_TOKEN: $(azdo_pat)
                        TF_VAR_AZDO_ORG_SERVICE_URL: $(azdo_orgurl)
                        TF_WORKSPACE: "default"
                      inputs:
                        provider: "azurerm"
                        command: "apply"
                        commandOptions: plan_destroy_$(environment_tag)
                        environmentServiceNameAzureRM: ${{ variables.subscription_connection}}
                        workingDirectory: $(System.DefaultWorkingDirectory)/$(tfdir)

                    - task: PowerShell@2
                      displayName: Check Terraform Destroy log
                      condition: succeededOrFailed()
                      inputs:
                        filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/terraform_log_checker.ps1"
                        arguments: "-LogName $(System.DefaultWorkingDirectory)/terraform_destroy.log -variableName TfDestroyLogExists"

                    - task: PublishPipelineArtifact@1
                      condition: |
                        and(
                        succeededOrFailed(),
                        eq(variables['TfDestroyLogExists'], 'true')
                        )
                      continueOnError: true
                      displayName: "Publish terraform Destroy log for $(environment_tag)"
                      enabled: true
                      inputs:
                        path: $(System.DefaultWorkingDirectory)/terraform_destroy.log
                        artifact: $(environment_tag)_Terraform_destroy_log
