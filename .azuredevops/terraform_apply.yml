parameters:
  - name: "environment_tags"
    type: object

  - name: use_selfhosted
    type: boolean
    default: false

  - name: bcaPool
    type: string

  - name: hostedImage
    type: string

  - name: "gitTag"
    type: string

  - name: "gitMessage"
    type: string

  - name: "shouldRun"
    type: string
    default: true

  - name: tf_loglevel
    type: string

  - name: run_tfapply
    displayName: Run Terraform apply to create/change/destroy infrastructure
    type: boolean
    default: true

stages:
  - "${{ each environment_tag in parameters.environment_tags }}":
      - stage: ${{ environment_tag}}_apply
        condition: |
          and(
          succeededOrFailed(),
          eq('${{ parameters.run_tfapply }}', 'True'),
          ne(variables['Build.Reason'], 'PullRequest'),
          ne(variables['Build.Reason'], 'Schedule'),
          eq(dependencies.plan.outputs['${{ environment_tag }}_plan.terraformplan${{ environment_tag }}.changesPresent'], 'true')
          )
        # this condition is to run the apply stage only:
        # 1. if the plan stage has run successfully
        # 2. if the environment specific plan job has detected changes
        # 3. if the pipeline is not triggered by a pull request
        # 4. if the pipeline is not triggered by a schedule
        displayName: "${{ environment_tag }} TF Apply"
        dependsOn: [plan]
        jobs:
          - deployment: ${{ environment_tag}}_apply
            environment: ${{ environment_tag}}
            timeoutInMinutes: 0
            variables:
              - name: environment_tag
                value: ${{ environment_tag}}
              - name: use_selfhosted
                value: ${{ parameters.use_selfhosted }}
              - template: ../iac_templates/variables.yml
                parameters:
                  environment_tag: ${{ environment_tag}}
            displayName: "Build/modify ${{ environment_tag}} infrastructure"
            pool:
              ${{ if or( eq(parameters.use_selfhosted, true), eq(variables.use_selfhosted, 'true')  ) }}:
                name: "${{ parameters.bcaPool }}"
              ${{ if and( eq(parameters.use_selfhosted, false), eq(variables.use_selfhosted, 'false') ) }}:
                vmimage: "${{ parameters.hostedImage }}"
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                      condition: succeededOrFailed()
                      displayName: "Checkout main repo"
                      fetchDepth: 0
                      fetchTags: true
                      persistCredentials: true

                    # - task: PowerShell@2
                    #   condition: succeededOrFailed()
                    #   displayName: Set Terraform Environment Variables
                    #   inputs:
                    #     filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/set_tf_env_vars.ps1"

                    - task: DownloadPipelineArtifact@2
                      condition: succeededOrFailed()
                      displayName: "Download terraform plan for $(environment_tag)"
                      inputs:
                        artifact: plan_$(environment_tag)
                        path: $(System.DefaultWorkingDirectory)/$(tfdir)

                    - task: PowerShell@2
                      displayName: "Inject GitHub PAT into module source URLs"
                      inputs:
                        filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/inject_github_pat.ps1"
                        arguments: "-githubpat $(github-pat)"
                        failOnStderr: true
                        showWarnings: true
                        pwsh: true
                        workingDirectory: "$(system.defaultworkingdirectory)"

                    - task: TerraformInstaller@1
                      condition: succeededOrFailed()
                      displayName: "Install terraform version $(terraform_installer_version)"
                      enabled: true
                      inputs:
                        terraformVersion: "$(terraform_installer_version)"

                    - task: TerraformTaskV4@4
                      condition: succeededOrFailed()
                      displayName: "terraform init"
                      inputs:
                        provider: "azurerm"
                        command: "init"
                        backendServiceArm: ${{ variables.subscription_connection}}
                        backendAzureRmResourceGroupName: "$(resource-group)"
                        backendAzureRmStorageAccountName: "$(storage-account)"
                        backendAzureRmContainerName: $(container-name)
                        backendAzureRmKey: "$(state-key)"
                        workingDirectory: $(system.DefaultWorkingDirectory)/$(tfdir)
                      env:
                        TF_LOG: ${{ parameters.tf_loglevel }}
                        TF_LOG_PATH: $(System.DefaultWorkingDirectory)/terraform_init.log

                    # - task: PowerShell@2
                    #   displayName: Check Terraform init log
                    #   condition: succeededOrFailed()
                    #   inputs:
                    #     filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/terraform_log_checker.ps1"
                    #     arguments: "-LogName $(System.DefaultWorkingDirectory)/terraform_init.log -variableName TfInitLogExists"

                    # - task: PublishPipelineArtifact@1
                    #   condition: |
                    #     and(
                    #     succeededOrFailed(),
                    #     eq(variables['TfInitLogExists'], 'true')
                    #     )
                    #   continueOnError: true
                    #   displayName: "Publish terraform init log for $(environment_tag)"
                    #   enabled: true
                    #   inputs:
                    #     path: $(System.DefaultWorkingDirectory)/terraform_init.log
                    #     artifact: $(environment_tag)_Terraform_apply_init_log

                    - task: terraformTask@5
                      condition: succeededOrFailed()
                      displayName: Terraform Apply
                      inputs:
                        provider: "azurerm"
                        command: "apply"
                        commandOptions: -input=false plan_$(environment_tag)
                        environmentServiceNameAzureRM: ${{ variables.subscription_connection}}
                        workingDirectory: $(System.DefaultWorkingDirectory)/$(tfdir)
                      env:
                        TF_LOG: ${{ parameters.tf_loglevel }}
                        TF_LOG_PATH: $(System.DefaultWorkingDirectory)/terraform_apply.log

                    # - task: PowerShell@2
                    #   displayName: Check Terraform apply log
                    #   condition: succeededOrFailed()
                    #   inputs:
                    #     filePath: "$(System.DefaultWorkingDirectory)/repo_template/build/scripts/terraform_log_checker.ps1"
                    #     arguments: "-LogName $(System.DefaultWorkingDirectory)/terraform_apply.log -variableName TfApplyLogExists"

                    # - task: PublishPipelineArtifact@1
                    #   condition: |
                    #     and(
                    #     succeededOrFailed(),
                    #     eq(variables['TfApplyLogExists'], 'true')
                    #     )
                    #   continueOnError: true
                    #   displayName: "Publish terraform Apply log for $(environment_tag)"
                    #   enabled: true
                    #   inputs:
                    #     path: $(System.DefaultWorkingDirectory)/terraform_apply.log
                    #     artifact: $(environment_tag)_Terraform_apply_log
